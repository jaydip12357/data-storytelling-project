import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Retrieve the encoded version of the General Patients Stats data
general_patients_stats_encoded = pd.read_csv("data/transformed/general_patients_stats_encoded.csv", low_memory=False)
general_patients_stats_encoded = general_patients_stats_encoded.drop(columns=["Unnamed: 0.1", "Unnamed: 0"])

"""
We are interested in seeing is how much impact the various pieces information collected on each of the patients
has on whether they remain alive or die. Therefore, we will use RandomForestClassifiers to report the importance
each of the variables have on whether the patients remain alive or die in general.
"""
rand_for_classifier = RandomForestClassifier()
# Remove other columns related to life status.
X = general_patients_stats_encoded.drop(columns=[
    "OCCODE",
    "FDEAD_Y",
    "TD",
    "DIED",
    "DALIVE_N", "DALIVE_U", "DALIVE_Y",
    "DDEAD_N", "DDEAD_U", "DDEAD_Y",
    "FDEAD_N", "FDEAD_U",
    "DEAD1", "DEAD2", "DEAD3", "DEAD4", "DEAD5", "DEAD6", "DEAD7", "DEAD8",
    "FU1_RECD", "FU1_COMP", "FU2_DONE",
    "EXPDD", "EXPD6", "EXPD14",
    "ID14", "SET14D",
    "HOURLOCAL", "MINLOCAL", "DAYLOCAL"
]) # columns array generated by ChatGPT 5 on 9/30/25 at 6:34 am.
y = general_patients_stats_encoded["FDEAD_Y"] # Status of indicating whether patients were alive or dead at the time of second outcome assessment point

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2025)

rand_for_classifier.fit(X_train, y_train)

predictions = rand_for_classifier.predict(X_test)

accuracy = accuracy_score(y_test, predictions)

print("Accuracy of Random Forest Classifier:", accuracy)

variable_names = pd.DataFrame(X.columns)
variable_importances = pd.DataFrame(rand_for_classifier.feature_importances_)
feature_importances_df = pd.concat(objs=[variable_names, variable_importances], axis=1)
print(feature_importances_df.to_string())